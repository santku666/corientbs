<?php
/**
 * ------------------------
 *  Funtion to sanatize name strings
 * ------------------------
*/
if (!function_exists('sanatize')) {
    function sanatize($data)
    {
        $data=trim($data);
        $data=stripslashes($data);
        $data=htmlspecialchars($data);
        $data=filter_var($data,FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        $data=preg_replace('/[^A-Za-z0-9\- ]/', '', $data);
        return $data;
    }
}


/**
 * ------------------------
 *  Funtion for url
 * ------------------------
*/
if (!function_exists('URL')) {
    function URL(string $url = "")
   {
       if ($url=="/" || $url=="") {
           return url();
       }
       else{
           return url($url);
       }
   }
}

/**
 * ------------------------
 *  Funtion for json response
 * ------------------------
*/

if (!function_exists('JsonResponse')) {
   function JsonResponse($type,$body,$headers=['content-type'=>"application/json"])
  {

       if (!isset($body)) {
           $body=[
               'serverData'=>null,
               'message'=>'oops something went wrong',
               'error'=>"Error Occured"
           ];
       }

       switch ($type) {
           case 'success':
               return response()->json([
                'status_text'=>array_key_exists('error',$body)?$body['error']:"",
                'message'=>array_key_exists('message',$body)?$body['message']:"",
                'serverData'=>array_key_exists('serverData',$body)?$body['serverData']:"",
               ],200,$headers);
               break;

           case 'error':
               return response()->json([
                'status_text'=>array_key_exists('error',$body)?$body['error']:"",
                'message'=>array_key_exists('message',$body)?$body['message']:"",
                'serverData'=>null,
               ],500,$headers);
               break;

           case 'redirect':
               return response()->json([
                   'status_text'=>$body['error'],
                   'message'=>$body['message'],
                   'serverData'=>null,
               ],302,$headers);
           break;

           case 'unauthorized':
               return response()->json([
                   'status_text'=>$body['error'],
                   'message'=>$body['message'],
                   'serverData'=>null,
               ],401,$headers);
           break;

           case 'not-found':
               return response()->json([
                   'status_text'=>$body['error'],
                   'message'=>$body['message'],
                   'serverData'=>null,
               ],404,$headers);
           break;

           case 'forbidden':
               return response()->json([
                   'status_text'=>$body['error'],
                   'message'=>$body['message'],
                   'serverData'=>null,
               ],403,$headers);
           break;
           
           default:
               return response()->json([
                   'status_text'=>'unknown response generated by server',
                   'message'=>'something went wrong',
                   'serverData'=>null,
               ],500,$headers);
               break;
       }
  }
}